struct Position { mut x: Real, mut y: Real, mut z: Real }

trait Image
function path(image: Image): String

struct Sprite owned by +Position {
  mut image: Image
}

trait Entity2D extends +Position, +Sprite


struct HealthState {
  mut health: Real
}

action heal(entity: +HealthState, amount: Real) { entity.HealthState.health += amount }
action damage(entity: +HealthState, amount: Real) { entity.HealthState.health -= amount }

struct Regeneration owned by +HealthState {
  amount: Real
  interval: Int
  mut counter: Int
}

action updateHealth(entity: +Regeneration) {
  let regeneration = entity.Regeneration
  if (remainder(regeneration.counter, regeneration.interval) == 0) {
    heal(entity, regeneration.amount)
  }
  regeneration.counter += 1
}


entity Skeleton implements Entity2D {
  component Position
  component Sprite
  component HealthState
  component Regeneration
}

action tick(s: Skeleton) {
  updateHealth(s)
}
