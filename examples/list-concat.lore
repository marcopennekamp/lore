function concat(as: [A], bs: [B]): [A | B] where A, B = {
  let mut result: [A | B] = as
  for (b <- bs) {
    result = result :+ b
  }
  result
}

action printList(list: [A]) where A {
  println('Printing generic list: $list')
}

action printList(list: [Int]) {
  println('Printing Int list: $list')
}

action printList(list: [String | Int]) {
  println('Printing String/Int list: $list')
}

action printList(list: [String | Int | Boolean]) {
  println('Printing String/Int/Boolean list: $list')
}

action test() {
  let list = [10]
  printList(list)
  let merged = concat(list, ['test'])
  printList(merged)
  let merged2 = concat(merged, [true])
  printList(merged2)
  let merged3 = concat(merged2, [15])
  printList(merged3)
}
