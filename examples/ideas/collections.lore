// In the medium-distant future, Lore collections should be handled functionally, with the option to write more
// optimized (imperative) algorithms if absolutely needed. I want to place a specific focus on monadic operations
// and a neat syntax for that.

// First of all, we have a few basic functional operations that are defined for any collections and in a
// broader sense monads.

const list = [1, 2, 3]
list.map(n => n + 2)  // [3, 4, 5]
list.flatMap(n => [n + 1, n + 2])  // [2, 3, 3, 4, 4, 5]
list.filter(n => n > 1)  // [2, 3]

// From a syntactic perspective, we want to do our best to make these monadic functions as easy to use
// as possible. Scala has made headway into this with their for-yield construct. But I don't think it's
// quite enough. I want these monadic expressions to integrate seamlessly into the language. It should
// feel good to use these constructs and one should never desire to go back to "the old way." It should
// be especially idiomatic for game development and scripting applications.

// Idea 1: Filter with default
n <- list if n > 1 else 0  // [0, 2, 3]

// Idea 2: Blockless flatMap
e1 <- list1
// The rest executes for all e1 in list1. That is, the extraction wraps the rest of the block in a sort of
// map/flatMap context.
const x = something(e1)
e2 <- list2
// The rest executes for all e2 in list2.
const maybeY = whatever(e2)  // Returns an optional value.
y <- maybeY
// Only executes for a given y in maybeY. Stops if None.
foo(e1, e2, y)

// This is essentially compiled to:
list1.flatMap { e1 =>
  const x = something(e1)
  list2.flatMap { e2 =>
    const maybeY = whatever(e2)
    maybeY.map { y =>
      foo(e1, e2, y)
    }
  }
}

// Idea 3: Blocks can still be used; they are just optional
function test(maybeX, maybeY, maybeZ, maybeW) {  // Types omitted purposefully.
  x <- maybeX  // x is available in the whole function body.
  // Four possible syntax choices:
  {
    y <- maybeY
    // y is available only in this block.
  }
  for (z <- maybeZ) {
    // z is available only in this block.
  }
  (w <- maybeW) {
    // w is available only in this block.
  }
  (y <- maybeY) >> {
    // y is available only in this block.
  }
}

// TODO: This needs a lot of work, inspiration, and creativity.
