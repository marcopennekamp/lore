/**
 * This lore file will result in a lot of errors, as we attempt to violate all the class constraints.
 */

// TODO: Write a test which checks that all the expected errors occur in the right places.

class A
class B

class C1 owned by +A

// Illegal: C2 may not extend C1 since B is not a subtype of A.
class C2 extends C1 owned by +B

entity E {
  component B
  // Illegal: E may not own C1 since it doesn't have a component A.
  component C1
  // Illegal: E may not own C1 and C2 at the same time, since they both share a superclass (trivially C1).
  component C2
}

// Illegal: X may not extend E as X is only a class and E is an entity.
class X extends E

entity Y extends E {
  // However, since Y has a component A, C1 is now a valid component!
  // Of course, that will not change anything about the fact that E is still not a valid class.
  component A
  // Illegal: We can't just declare a component of the same type in a subclass.
  component B
}



class G
class H extends G
class H2 extends G

entity O {
  component A
  component C1
}

entity O2 extends O {
  component C2 overrides C1
  // Illegal: B is not a subtype of C1.
  component B overrides C1
  // Illegal: E doesn't have a component G.
  component H overrides G
  // Illegal: The type I doesn't exist.
  component H2 overrides I
}

entity O3 {
  // Illegal: H and H2 share a superclass!
  component H
  component H2
}



entity P {
  component G
}

entity P2 extends P {
  component H overrides G
}

entity P3 extends P2 {
  // Illegal: Component G has already been overridden!
  component H2 overrides G
}



entity Cyclic {
  a: A
  b: B

  foo(a: A) {
    this.bar(a)
  }

  bar(a: A) {
    this.foo(a)
  }

  baz(a: A) {
    this(a, B())
  }
}
