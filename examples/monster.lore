trait Animal
function name(animal: Animal): String

trait Fish extends Animal
// TODO: Should we allow traits to "inherit" all abstract functions implicitly? Having to redeclare abstract
//       functions like this could be a nuisance indeed... Maybe we can fix this in a simple way?
//       Obviously, the totality constraint would have to be checked by looking for specialized functions of the
//       implicit function, but this seems like a step we can take in the checking algorithm.
function name(fish: Fish): String

struct Bass implements Fish {
  name: String
}
function name(bass: Bass): String = bass.name

// A Monster made of several different parts, but currently only a fish... Maybe its leg!
struct Monster {
  component Fish
}

action react(entity: Monster) {
  println('A monster with a fish named ${name(entity.Fish)} sticking out of it!!')
}

action react(entity: Monster & +Bass) {
  println('Slap that bass called ${entity.Bass.name}!!!')
}

action test() {
  let fish = Bass('Les')
  let monster = Monster(fish)
  react(monster)
}
