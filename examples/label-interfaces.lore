/**
 * This example demonstrates how to implement functions generally for label types.
 * It would only start to make sense once we have dynamic specialization and generalization, of course.
 */

label L
function f(x: L): Int = () // Some implementation that accesses g and h.
function g(x: L): Real
function h(x: L): Real

// Two classes that define ad-hoc functions for the label type. Note that the idea is that A and B are specialized
// at RUN-TIME to subtype the label type. This means that we can't check at compile-time whether A or B actually
// implement g or h.
// TODO: Everywhere a type is specialized with a label type, we check at compile-time that the required functions are
//       declared.
class A
function g(a: A & L): Real = ()
function h(a: A & L): Real = ()

class B
function g(b: B & L): Real = ()
function h(a: B & L): Real = ()

// We can then call f with A or B if they also subtype L: f(a) and f(b).
