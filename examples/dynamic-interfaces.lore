/**
 * This example demonstrates how to implement functions generally for trait types.
 * It would only start to make sense once we have dynamic specialization and generalization, of course.
 */

trait L
function f(x: L): Real = g(x) * h(x)
function g(x: L): Real
function h(x: L): Real

// Two structs that define ad-hoc functions for the trait type. Note that the idea is that A and B are specialized
// at RUN-TIME to subtype the label type. This means that we can't check at compile-time whether A or B actually
// implement g or h.
// TODO: Everywhere a type is specialized with a trait type, we should check at compile-time that the required
//       functions are declared.
struct A
function g(a: A & L): Real = 5.0
function h(a: A & L): Real = 1.2

struct B
function g(b: B & L): Real = 4.20
function h(a: B & L): Real = 81423.17

// We can then call f with A or B if they also subtype L: f(a) and f(b).
