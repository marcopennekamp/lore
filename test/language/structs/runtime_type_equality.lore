module language.structs.runtime_type_equality

trait Material
object Leather extends Material
object Cloth extends Material

struct Bag
  open material: Material
end

func equal_types?(A, B): Boolean where A, B = false
func equal_types?(A, A): Boolean where A = true

func subtype?(A, B): Boolean where A, B = false
func subtype?(A, B): Boolean where A, B <: A = true

@root
module language.structs do
  use lore.test._

  // This test demonstrates that struct types bearing the same name may not always be equal or subtypes of each other
  // at run time. This has implications for the use of type parameters, where the run-time type matters most. A Lore
  // programmer should be aware of these "quirks".
  //
  // This behavior is not by design. We have to achieve consistent type equality and subtyping at run-time. These
  // operations are defined without any regards to the "outside world" and shouldn't be changed because some other part
  // of the system would benefit from a rule change.
  spec 'runtime_type_equality: struct type equality with open property types leads to the expected dispatch outcomes' do
    let leather_bag = Bag(Leather)
    let cloth_bag = Bag(Cloth)

    equal_types?(leather_bag, leather_bag) should be_true
    equal_types?(cloth_bag, cloth_bag)     should be_true
    equal_types?(leather_bag, cloth_bag)   should be_false
    equal_types?(cloth_bag, leather_bag)   should be_false

    subtype?(leather_bag, leather_bag)     should be_true
    subtype?(cloth_bag, cloth_bag)         should be_true
    subtype?(leather_bag, cloth_bag)       should be_false
    subtype?(cloth_bag, leather_bag)       should be_false
  end
end
