module language.dispatch.tuple

// Obscuring the tuple types forces the compiler to dispatch to the most general `consume` at compile-time.
func obscure(x: Any, y: Any): (Any, Any) = (x, y)

func consume((Any, Any)): String = 'Consume any and any!'
func consume((Int, Any)): String = 'Consume int and any!'
func consume((String, Int)): String = 'Consume string and int!'
func consume((Boolean, String)): String = 'Consume boolean and string!'

@root
module language.dispatch do
  use lore.test._

  spec 'tuples: `consume` produces strings from obscured tuples' do
    consume(obscure('string', 15)) should_eq 'Consume string and int!'
    consume(obscure(15, 'string')) should_eq 'Consume int and any!'
    consume(obscure('string', false)) should_eq 'Consume any and any!'
    consume(obscure(true, 'string')) should_eq 'Consume boolean and string!'
    consume(obscure('string', 'string')) should_eq 'Consume any and any!'
  end
end
