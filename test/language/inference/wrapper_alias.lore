module language.inference.wrapper_alias

use lore.list.[List, map]
use lore.string.join

struct Wrapper[-A, +B](function: A => B)
struct StringWrapper[X] = Wrapper[X, String]

@where A, B >: A, C
func map_wrapper(list: [A], wrapper: Wrapper[B, C]): [C] = list.map(wrapper.function)

func map_numbers(): [String] = do
  let numbers = [1, 3, 5]
  numbers.map_wrapper(
    StringWrapper(n => do
      List.repeat('Hey!', n) |> join(' ')
    end),
  )
end

@root
module language.inference do
  use lore.test._

  // Objective: Ensure that constructor calls involving struct aliases are correctly typed.
  spec 'wrapper_alias: `map_wrapper` maps a StringWrapper struct alias wrapping an inferred lambda function over a list of numbers to produce a sequence of repeated strings' do
    map_numbers() should_eq ['Hey!', 'Hey! Hey! Hey!', 'Hey! Hey! Hey! Hey! Hey!']
  end
end
