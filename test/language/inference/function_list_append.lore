module language.inference.function_list_append

use lore.Enum.[flat_map, map]
use lore.Function

struct Thing(x: Real)

func map_things(): [Boolean] = do
  let fs1: [Thing => Boolean] = [v => v.x == 4.0]
  let fs2 = fs1 :+ (v => v.x < 3.4)
  let data = [
    Thing(1.0),
    Thing(4.0),
    Thing(5.0),
    Thing(-2.0),
  ]
  data |> flat_map(thing => fs2 |> map(f => f(thing)))
end

@root
module language.inference do
  use lore.test._

  spec 'function_list_append: the parameter type of an anonymous function is inferred when the anonymous function is added to a typed list of functions' do
    map_things() should_eq [false, true, true, false, false, false, false, true]
  end
end
