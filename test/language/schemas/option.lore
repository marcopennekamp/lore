module language.schemas.option

use lore.core.to_string
use lore.list.map
use lore.option.[Some, None]

trait AerialPhenomenon
object Bird extends AerialPhenomenon
object Plane extends AerialPhenomenon
object Dragon extends AerialPhenomenon

@root
module lore.core do
  func to_string(Some[Bird]): String = 'It\'s just a bird.'
  func to_string(Some[Plane]): String = 'My gosh, the pollution up there!'
  func to_string(Some[Dragon]): String = 'Oh shit, it\'s a dragon!'
  func to_string(Some[[Dragon]]): String = 'They\'re everywhere!'
end

@root
module language.schemas do
  use lore.test._

  spec 'option: stringify options based on their open type argument' do
    let options = [
      None,
      Some('Hello, world!'),
      Some([1, 2, 3]),
      [Some(Bird), Some(Plane), Some(Dragon)],
      Some { value = [Dragon, Dragon, Dragon] },
    ]

    map(options, to_string) should_eq [
      'None',
      'Some(Hello, world!)',
      'Some([1, 2, 3])',
      '[It\'s just a bird., My gosh, the pollution up there!, Oh shit, it\'s a dragon!]',
      'They\'re everywhere!',
    ]
  end
end
