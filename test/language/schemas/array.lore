module language.schemas.array

use lore.list._

trait Array[+A]

@where A
domain Array[A]
  func at(index: Int): A

  @where E <: A
  act prepend(element: E)

  @where E <: A
  act append(element: E)

  act remove_first()
  act remove_last()
end

struct NaiveArray[A] extends Array[A]
  mut underlying: [A]
end

// TODO: Given these functions, the compiler should not allow `NaiveArray` to extend a covariant `Array[A]`. But can we
//       deduce this? Right now, trying to add a Real to a NaiveArray[Int] via an Array[Real] interface leads to a
//       run-time error. This is acceptable, but might not be good enough.
@where A
domain array: NaiveArray[A]
  func at(index: Int): A = array.underlying.get!(index)

  @where E <: A
  act prepend(element: E) do
    array.underlying = concat([element], array.underlying)
  end

  @where E <: A
  act append(element: E) do
    array.underlying = array.underlying :+ element
  end

  act remove_first() do
    array.underlying = array.underlying.tail
  end

  act remove_last() do
    array.underlying = array.underlying.init
  end
end

@root
module language.schemas do
  use lore.test._

  spec 'array: elements can be added and removed from NaiveArrays' do
    let array = NaiveArray([1, 2])

    array.append(3)
    array.append(4)
    array.append(5)
    array.underlying should_eq [1, 2, 3, 4, 5]

    array.prepend(0)
    array.underlying should_eq [0, 1, 2, 3, 4, 5]

    array.remove_last()
    array.remove_first()
    array.remove_first()
    array.underlying should_eq [2, 3, 4]
  end
end
