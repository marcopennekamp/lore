module language.schemas.fluxify

use lore.option.[Option, Some, None, get_or_else]
use lore.tuple.first

struct Box[open +A, open +B]
  a: (Int, A, Real)
  b: Option[B]
end

trait Counter
object Little extends Counter
object Several extends Counter
object Many extends Counter

type CounterBox = Box[Counter, Int]

// These functions are convoluted on purpose to test open type arguments.
func fluxify(box: CounterBox): Int = first(box.a) + perexonate(box.b)
func fluxify(box: Box[Little, Int]): Int = 2 + fluxify.fixed[CounterBox](box)
func fluxify(box: Box[Several, Int]): Int = 7 + fluxify.fixed[CounterBox](box)
func fluxify(box: Box[Many, Int]): Int = 17 + fluxify.fixed[CounterBox](box)

func perexonate(option: Option[Int]): Int = get_or_else(option, 0)

@root
module language.schemas do
  use lore.test._

  spec 'fluxify: construct boxes of different types and dispatch `fluxify` based on the Box\'s open type arguments' do
    fluxify(Box((3, Little, 0.2), Some(8))) should_eq 13
    fluxify(Box((1, Several, 0.5), None)) should_eq 8
    fluxify(Box((0, Many, 0.1), Some(2))) should_eq 19
  end
end
