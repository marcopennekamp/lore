module language.schemas.goods

struct Box[+A](content: A)

trait Price
object HighPrice extends Price
object MediumPrice extends Price
object LowPrice extends Price

trait Metal[+P <: Price]
object Gold extends Metal[HighPrice]
object Silver extends Metal[MediumPrice]
object Iron extends Metal[LowPrice]

func price(Box[Metal[Price]]): Real = 0.0
func price(Box[Metal[HighPrice]]): Real = 48.5
func price(Box[Metal[MediumPrice]]): Real = 17.2
func price(Box[Metal[LowPrice]]): Real = 1.6

@root
module language.schemas do
  use lore.test._

  // The spec ensures that nested type arguments are taken into account correctly during dispatch.
  spec 'price: `price` calculates the price of different metals in boxes based on their type arguments' do
    Box(Gold).price should_eq 48.5
    Box(Silver).price should_eq 17.2
    Box(Iron).price should_eq 1.6
  end
end
