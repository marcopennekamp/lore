module examples.naivemethic

func add(a: Int, b: Int): Int =
  var result = a
  var remaining = b

  while remaining > 0 do
    result += 1
    remaining -= 1

  while remaining < 0 do
    result -= 1
    remaining += 1

  result

func mul(a: Int, b: Int): Int =
  let negative? = a < 0
  var remaining = if negative? then -a else a

  var result = 0
  while remaining > 0 do
    result = add(result, b)
    remaining = add(remaining, -1)

  if negative? then -result else result

@root
module examples
  use lore.test._

  spec 'naivemethic: `mul(12, 5)` evaluates to 60' do
    mul(12, 5) should_eq 60
