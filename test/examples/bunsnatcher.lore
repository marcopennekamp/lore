module examples.bunsnatcher

use lore.Enum.map
use lore.List.max_by!
use lore.Tuple

// ---------------------------------------------------------------------------------------------------------------------
// Let's set the scene: Bertram Bunsnatcher, a rich industrialist, was found murdered in his cliff-side manor. There
// are a number of suspects. Ten, to be precise. And Detective Truman Trout must find the culprit, as only one of them
// could've done it. Let's dive into the prejudiced mind of Detective Trout and test all the subjects' guilt!
// ---------------------------------------------------------------------------------------------------------------------

trait Color
object Red extends Color
object Black extends Color
object Brown extends Color
object Yellow extends Color
object Blue extends Color

trait Profession
object Tailor extends Profession
object Lawyer extends Profession
object Entrepreneur extends Profession
object Gardener extends Profession
object Assassin extends Profession

trait Tool
object Scissors extends Tool
object Suitcase extends Tool
object Paperknife extends Tool
object Spade extends Tool
object Dagger extends Tool

func tool(Profession): Tool
func tool(Tailor): Tool = Scissors
func tool(Lawyer): Tool = Suitcase
func tool(Entrepreneur): Tool = Paperknife
func tool(Gardener): Tool = Spade
func tool(Assassin): Tool = Dagger

func sharpness(Tool): Real
func sharpness(sharp_tool: Scissors | Paperknife | Dagger): Real = 1.0
func sharpness(blunt_tool: Suitcase | Spade): Real = 0.0

func bluntness(tool: Tool): Real = 1 - sharpness(tool)

trait Relation
trait Friendly extends Relation
trait Neutral extends Relation
trait Hostile extends Relation
object Professional extends Neutral
object Cordial extends Neutral
object Friends extends Friendly
object Lovers extends Friendly, Hostile
object Competing extends Hostile
object Shunned extends Hostile

trait Approach
object Socialising extends Approach
object Calculating extends Approach
object Honest extends Approach
object Indifferent extends Approach

struct Suspect
  name: String

  open hair_color: Color
  open clothes_color: Color
  open profession: Profession

  /**
    * The suspect's general approach to social and professional situations.
    */
  open approach: Approach

  /**
    * The suspect's relation to the victim.
    */
  open relation: Relation
end

@root
module lore.core do
  func to_string(suspect: Suspect): String = suspect.name
end

// ---------------------------------------------------------------------------------------------------------------------
// The kitchen maid saw a person leave by the staff entrance into the rainstorm outside. She noticed a flash of red as
// the door slammed behind the suspect. Detective Trout wonders: Was it the color of their clothes, their hair, or both?
// ---------------------------------------------------------------------------------------------------------------------

func color_factor(suspect: %{ hair_color: Color, clothes_color: Color }): Real = 0.8
func color_factor(suspect: %{ hair_color: Red, clothes_color: Color }): Real = 1.2
func color_factor(suspect: %{ hair_color: Color, clothes_color: Red }): Real = 1.2
func color_factor(suspect: %{ hair_color: Red, clothes_color: Red }): Real = 1.5

// ---------------------------------------------------------------------------------------------------------------------
// The suspect was murdered with a blunt weapon devoid of any sharpness. However, the murder weapon hasn't been found
// and Bunsnatcher's mansion is vast with an unaccountable number of objects. It cannot be ruled out that the murder
// weapon was already in the mansion before the suspect arrived, meaning the suspect didn't use their own tools of the
// trade.
// ---------------------------------------------------------------------------------------------------------------------

func weapon_factor(suspect: Suspect): Real = 1 + bluntness(tool(suspect.profession)) / 2

// ---------------------------------------------------------------------------------------------------------------------
// Bertram Bunsnatcher was an influential man. He crossed paths with many people throughout his life. Some were blessed
// by his business, while others suffered from his influence.
// ---------------------------------------------------------------------------------------------------------------------

func motive_factor(suspect: %{ }): Real = 1.0

// Friends don't kill friends, right?
func motive_factor(suspect: %{ relation: Friendly }): Real = 0.8

// Anyone who was hostile to Bunsnatcher could be the killer! "Let's also not forget that lovers are unpredictable,"
// says Detective Trout.
func motive_factor(suspect: %{ relation: Hostile }): Real = 1.2

// Some ex-employees of Bertram Bunsnatcher would have more than plenty of motive to kill him.
func motive_factor(suspect: %{ profession: Tailor | Lawyer | Gardener, relation: Shunned }): Real = 1.5

// It is widely acknowledged that lawyers are utterly inhuman and thus cannot have or be friends. The lawyer must've
// pretended to Bertram Bunsnatcher for some ulterior motive.
func motive_factor(suspect: %{ profession: Lawyer, relation: Friendly }): Real = 1.2
func motive_factor(suspect: %{ profession: Lawyer, relation: Lovers }): Real = 1.2 // Sadly needed for disambiguation.

// Business rivals always have a good motive to kill such a wealthy business magnet.
func motive_factor(suspect: %{ profession: Entrepreneur, relation: Competing }): Real = 1.3

// Shunned rivals even more so, as Bunsnatcher doesn't even acknowledge them anymore.
func motive_factor(suspect: %{ profession: Entrepreneur, relation: Shunned }): Real = 1.4

// Perhaps a more than calculating business partner who murdered Bunsnatcher in cold blood?
func motive_factor(suspect: %{ profession: Entrepreneur, approach: Calculating, relation: Friendly | Neutral }): Real = 1.5

// It is highly unlikely that an assassin would've done such a sloppy job, unless the victim and the assassin were
// friends and the assassin messed up out of emotional attachment to the "job"!
func motive_factor(suspect: %{ profession: Assassin }): Real = 0.2
func motive_factor(suspect: %{ profession: Assassin, relation: Friendly }): Real = 1.5
func motive_factor(suspect: %{ profession: Assassin, relation: Lovers }): Real = 1.5 // Sadly needed for disambiguation.

// ---------------------------------------------------------------------------------------------------------------------
// "75% of all cases are decided based on character," Detective Trout says. "Horrible people are more likely to commit
// horrible crimes."
// ---------------------------------------------------------------------------------------------------------------------

func character_factor(suspect: %{ }): Real = 1.0

// Honest jobs for honest people.
func character_factor(suspect: %{ profession: Tailor | Gardener | Assassin, approach: Honest }): Real = 0.5

// Lawyers are terrible people, obviously. Except the honest ones. They are only slightly terrible.
func character_factor(suspect: %{ profession: Lawyer }): Real = 1.4
func character_factor(suspect: %{ profession: Lawyer, approach: Honest }): Real = 1.1

// Do you like to exploit people? Then this is the profession for you! The honest ones are even worse: they don't even
// hide or justify their exploitation behind a curtain of lies.
func character_factor(suspect: %{ profession: Entrepreneur }): Real = 1.2
func character_factor(suspect: %{ profession: Entrepreneur, approach: Honest }): Real = 1.3

// ---------------------------------------------------------------------------------------------------------------------
// "I know all about poisons, Watson. I've become an expert on all of them. But over the last few years, I've come to
// understand that there is nothing on this earth so toxic as guilt." - Sherlock Holmes
// ---------------------------------------------------------------------------------------------------------------------

/**
  * For the given suspect, returns the likelihood of their guilt. There can only be a single murderer.
  */
func compute_guilt(suspect: Suspect): Real = color_factor(suspect) * weapon_factor(suspect) * motive_factor(suspect) * character_factor(suspect)

/**
  * Returns the suspect which is deemed the most likely murderer.
  */
func main(): Suspect = do
  let suspects = [
    Suspect('Rilam Ralam', Black, Yellow, Entrepreneur, Calculating, Competing),
    Suspect('Warren Warner', Black, Brown, Gardener, Honest, Cordial),
    Suspect('Vichity Vichy', Yellow, Red, Lawyer, Calculating, Shunned),
    Suspect('Redmond Riley', Red, Red, Tailor, Socialising, Friends),
    Suspect('Mary Monroe', Red, Blue, Assassin, Indifferent, Lovers),
    Suspect('Burke Partnerton', Black, Black, Entrepreneur, Socialising, Professional),
    Suspect('Meredith Partnerton', Red, Black, Entrepreneur, Calculating, Professional),
    Suspect('Ella Marsk', Brown, Blue, Gardener, Socialising, Shunned),
    Suspect('Rooney Rudigiani', Black, Brown, Lawyer, Socialising, Lovers),
    Suspect('Goodman Niceman', Black, Black, Assassin, Honest, Cordial),
  ]

  suspects
    |> map(suspect => (suspect, suspect |> compute_guilt))
    |> max_by!(Tuple.second)
    |> Tuple.first
end

@root
module examples do
  use lore.test._

  @bench
  spec 'bunsnatcher: Vichity Vichy is the most likely murderer' do
    let suspect = main()
    suspect.name should_eq 'Vichity Vichy'
  end
end
