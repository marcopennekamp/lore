trait Option[+A]
struct Some[open +A](value: A) extends Option[A]
struct None extends Option[Nothing]


struct Box[open +A, open +B] {
  a: (Int, A, Real)
  b: Option[B]
}


trait Counter
struct Little extends Counter
struct Several extends Counter
struct Many extends Counter

type CounterBox = Box[Counter, Int]


// These functions are convoluted on purpose to test open type arguments.
func fluxify(box: CounterBox): Int = first(box.a) + perexonate(box.b)
func fluxify(box: Box[Little, Int]): Int = 2 + fluxify.fixed[CounterBox](box)
func fluxify(box: Box[Several, Int]): Int = 7 + fluxify.fixed[CounterBox](box)
func fluxify(box: Box[Many, Int]): Int = 17 + fluxify.fixed[CounterBox](box)

func perexonate(option: Option[Int]): Int
func perexonate(option: Some[Int]): Int = option.value
func perexonate(option: None): Int = 0


func test(): [Int] = {
  let boxes = [
    Box((3, Little(), 0.2), Some(8)),
    Box((1, Several(), 0.5), None()),
    Box((0, Many(), 0.1), Some(2))
  ]
  map(boxes, fluxify)
}
