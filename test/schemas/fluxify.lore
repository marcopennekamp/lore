struct Box[open +A, open +B]
  a: (Int, A, Real)
  b: Option[B]
end


trait Counter
object Little extends Counter
object Several extends Counter
object Many extends Counter

type CounterBox = Box[Counter, Int]


// These functions are convoluted on purpose to test open type arguments.
func fluxify(box: CounterBox): Int = first(box.a) + perexonate(box.b)
func fluxify(box: Box[Little, Int]): Int = 2 + fluxify.fixed[CounterBox](box)
func fluxify(box: Box[Several, Int]): Int = 7 + fluxify.fixed[CounterBox](box)
func fluxify(box: Box[Many, Int]): Int = 17 + fluxify.fixed[CounterBox](box)

func perexonate(option: Option[Int]): Int = get(option, 0)


func test(): [Int] = do
  let boxes = [
    Box((3, Little, 0.2), Some(8)),
    Box((1, Several, 0.5), None),
    Box((0, Many, 0.1), Some(2)),
  ]
  boxes |> map(fluxify)
end
