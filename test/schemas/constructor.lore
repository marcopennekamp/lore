trait Content
struct Cereal() extends Content
struct Blood() extends Content
struct Pudding() extends Content

func toString(Cereal): String = 'cereal'
func toString(Blood): String = 'blood'
func toString(Pudding): String = 'pudding'


trait Container[+C]

struct Bowl[+C <: Content] extends Container[C]
  content: C
  taste: Int
end

struct Cup[+C <: Content] extends Container[C]
  content: C
  exclusivity: Int
end

func toString(bowl: Bowl[Content]): String = '${bowl.content} bowl'
func toString(cup: Cup[Content]): String = '${cup.content} cup'


func cereal(container: (Cereal, Int) => A): A where A = container(Cereal(), 4)
func blood(container: (Blood, Int) => A): A where A = container(Blood(), 1)
func pudding(container: (Pudding, Int) => A): A where A = container(Pudding(), 9)


func test(): [String] = do
  let containers = [
    cereal(Bowl), cereal(Cup),
    blood(Bowl), blood(Cup),
    pudding(Bowl), pudding(Cup)
  ]
  map(containers, toString)
end
