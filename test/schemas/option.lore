trait Option[+A]
struct Some[open +A](value: A) extends Option[A]
struct None() extends Option[Nothing]

func to_string(Option[Any]): String
func to_string(some: Some[Any]): String = 'Some(${some.value})'
func to_string(None): String = 'None'


trait AerialPhenomenon
struct Bird() extends AerialPhenomenon
struct Plane() extends AerialPhenomenon
struct Dragon() extends AerialPhenomenon

func to_string(Some[Bird]): String = 'It\'s just a bird.'
func to_string(Some[Plane]): String = 'My gosh, the pollution up there!'
func to_string(Some[Dragon]): String = 'Oh shit, it\'s a dragon!'
func to_string(Some[[Dragon]]): String = 'They\'re everywhere!'


func test(): [String] = do
  let none = None()
  let string = Some('Hello, world!')
  let list = Some([1, 2, 3])
  let aerials = [Some(Bird()), Some(Plane()), Some(Dragon())]
  let dragons = Some { value = [Dragon(), Dragon(), Dragon()] }
  map([none, string, list, aerials, dragons], to_string)
end
