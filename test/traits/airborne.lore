trait Named
func name(Named): String

trait Airborne
func wingspan(Airborne): Real


struct Bird extends Named, Airborne
  species: String
  weight: Real
  wingspan: Real
end

domain bird: Bird
  func name(): String = bird.species
  func wingspan(): Real = bird.wingspan
end


struct Plane extends Named, Airborne
  model: String
  capacity: Int
  wingspan: Real
end

domain plane: Plane
  func name(): String = plane.model
  func wingspan(): Real = plane.wingspan
end


func equal?(a1: Airborne, a2: Airborne): Boolean = wingspan(a1) == wingspan(a2)
func equal?(b1: Bird, b2: Bird): Boolean = b1.species == b2.species && b1.weight == b2.weight && b1.wingspan == b2.wingspan
func equal?(p1: Plane, p2: Plane): Boolean = p1.model == p2.model && p1.capacity == p2.capacity && p1.wingspan == p2.wingspan

// TODO: This actually presents an interesting dilemma: The equals operation is symmetric, but multiple dispatch needs
//       two function definitions to model this binary symmetry. The problem here is that the average programmer would
//       assume that defining equal?(Bird, Plane) covers all cases, while he/she leaves out the (Plane, Bird) case
//       without encountering any warning. This problem might not even be discovered at first, if only bird == plane
//       comparisons are used, and only later plane == bird comparisons are added.
// Idea: This could maybe be solved once we have a macro system. We could allow creating arbitrary keywords for
//       functions and such and then implement a "symmetric" keyword that declares for a function over (a, b) another
//       function over (b, a).
//func equal?(bird: Bird, plane: Plane): Boolean = bird.wingspan == plane.wingspan
//func equal?(plane: Plane, bird: Bird): Boolean = bird == plane

func check(v1: Named, v2: Named): [String] = if v1 == v2 then ['${name(v1)} == ${name(v2)}'] else []

func test(): [String] = do
  let airbornes = [
    Bird('Raven', 1.5, 1.2),
    Bird('Dragon', 6000.0, 12),
    Bird('Crow', 1.0, 1.2),
    Plane('B-2 Spirit', 2, 52.4),
    Plane('Cessna', 2, 12),
    Plane('Model Plane', 0, 1.2)
  ]

  let pairs = symmetric_pairs(airbornes)
  flat_map(pairs, pair => check(first(pair), second(pair)))
end
