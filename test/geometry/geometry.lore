// Not to be confused with shape types and shape values. :)
trait Shape

// "Computed"/"Virtual" properties. Could be improved with the property syntax for types/traits suggested in the spec.
function width(shape: Shape): Real
function height(shape: Shape): Real

function area(shape: Shape): Real = width(shape) * height(shape)


// TODO: We could really use mixins for the coordinates.
struct BoundingBox implements Shape { x: Real, xEnd: Real, y: Real, yEnd: Real }

// The same suggestions about a property syntax apply here. This is quite verbose, but alright for the MVL, since
// we should focus on functionality/correctness first, not syntactic nicety.
function width(rect: Rectangle): Real = rect.width
function height(rect: Rectangle): Real = rect.height


struct Circle implements Shape { x: Real, y: Real, radius: Real }

function width(circle: Circle): Real = circle.radius
function height(circle: Circle): Real = circle.radius

function area(circle: Circle): Real = circle.radius * circle.radius * pi()


struct Rectangle implements Shape { x: Real, y: Real, width: Real, height: Real }

function width(box: BoundingBox): Real = box.xEnd - box.x
function height(box: BoundingBox): Real = box.yEnd - box.y


// It could be quite elegant, once we allow pattern matching, to specify parameters as name(_: Circle) if the name is
// not important for the current implementation of the function.
function name(shape: Shape): String
function name(rectangle: Rectangle): String = 'rect'
function name(box: BoundingBox): String = 'box'
function name(circle: Circle): String = 'circle'


// Yeah, I know. We don't have global constants yet.
function pi(): Real = 3.14159265359
