// Not to be confused with shape types and shape values. :)
trait Shape

// "Computed"/"Virtual" properties. Could be improved with the property syntax for types/traits suggested in the spec.
func width(shape: Shape): Real
func height(shape: Shape): Real

func area(shape: Shape): Real = width(shape) * height(shape)


struct BoundingBox extends Shape {
  x: Real, xEnd: Real
  y: Real, yEnd: Real
}

func width(box: BoundingBox): Real = box.xEnd - box.x
func height(box: BoundingBox): Real = box.yEnd - box.y


struct Circle extends Shape {
  x: Real, y: Real
  radius: Real
}

func width(circle: Circle): Real = circle.radius
func height(circle: Circle): Real = circle.radius

func area(circle: Circle): Real = circle.radius * circle.radius * pi()


struct Rectangle extends Shape {
  x: Real, y: Real
  width: Real, height: Real
}

// The same suggestions about a property syntax apply here. This is quite verbose, but alright for the MVL, since
// we should focus on functionality/correctness first, not syntactic nicety.
func width(rect: Rectangle): Real = rect.width
func height(rect: Rectangle): Real = rect.height


// It could be quite elegant, once we allow pattern matching, to specify parameters as name(_: Circle) if the name is
// not important for the current implementation of the function.
func name(shape: Shape): String
func name(rectangle: Rectangle): String = 'rect'
func name(box: BoundingBox): String = 'box'
func name(circle: Circle): String = 'circle'


// Yeah, I know. We don't have global constants yet.
func pi(): Real = 3.14159265359
