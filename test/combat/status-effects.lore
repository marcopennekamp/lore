trait StatusEffect

/**
 * Applies the given status effect to the stat identified with the given label.
 */
func affect_stat(StatusEffect, StatLabel, value: A): A where A = value

/**
 * Called during the end-of-turn status effect update.
 */
act on_update(StatusEffect) do end

/**
 * Called whenever the entity gets hit by an attack (after a potential dodge failed).
 */
act on_hit(StatusEffect) do end

/**
 * Whether the given status effect is active.
 */
func active?(StatusEffect): Boolean = true


struct DurationLimit
  mut duration: Int
end

type +DurationLimit = StatusEffect & %{ limit: DurationLimit }

act on_update(effect: +DurationLimit) do
  if active?(effect)
    effect.limit.duration -= 1
  end
end

func active?(effect: +DurationLimit): Boolean = effect.limit.duration > 0


struct HitLimit
  mut hits: Int
end

type +HitLimit = StatusEffect & %{ limit: HitLimit }

act on_hit(effect: +HitLimit) do
  if active?(effect)
    effect.limit.hits -= 1
  end
end

func active?(effect: +HitLimit): Boolean = effect.limit.hits > 0


/**
 * The entity is armored and has increased defense. The armor breaks after a set amount of hits.
 */
struct Armored extends StatusEffect
  armor: Int
  limit: HitLimit
end

func create_armored(armor: Int, durability: Int): Armored = Armored(armor, HitLimit(durability))

func affect_stat(effect: Armored, #defense, value: Int): Int = value + effect.armor


/**
 * The entity is infused with Stormlight.
 */
struct Infusion extends StatusEffect
  limit: DurationLimit
end

func create_infusion(duration: Int): Infusion = Infusion(DurationLimit(duration))

func affect_stat(effect: Infusion, #attack | #speed, value: Int): Int = floor(value * 1.5)
func affect_stat(effect: Infusion, #dodge, value: Real): Real = 1.0 // Dodge all attacks while infused.
func affect_stat(effect: Infusion, #regeneration, value: Int): Int = 5


struct StatusEffects
  mut effects: [StatusEffect]
end

type +StatusEffects = %{ status_effects: StatusEffects }

act buff(entity: +StatusEffects, effect: StatusEffect) do
  entity.status_effects.effects = entity.status_effects.effects :+ effect
end

/**
 * Updates status effects, removing those from the list that have expired.
 */
act update_status_effects(entity: +StatusEffects) do
  let effects = entity.status_effects.effects
  each(effects, on_update)
  entity.status_effects.effects = filter(effects, active?)
end

act on_hit_status_effects(entity: +StatusEffects) do
  for effect <- entity.status_effects.effects
    on_hit(effect)
  end
end
