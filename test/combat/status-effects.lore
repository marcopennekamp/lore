trait StatusEffect

/**
 * Applies the given status effect to the stat identified with the given label.
 */
function affectStat(effect: StatusEffect, statLabel: StatLabel, value: A): A where A = value

/**
 * Called during the end-of-turn status effect update.
 */
action onUpdate(effect: StatusEffect) { }

/**
 * Called whenever the entity gets hit by an attack (after a potential dodge failed).
 */
action onHit(effect: StatusEffect) { }

/**
 * Whether the given status effect is active.
 */
function isActive(effect: StatusEffect): Boolean = true


struct DurationLimit {
  mut duration: Int
}

type +DurationLimit = StatusEffect & { limit: DurationLimit }

action onUpdate(effect: +DurationLimit) {
  if (isActive(effect)) {
    effect.limit.duration -= 1
  }
}

function isActive(effect: +DurationLimit): Boolean = effect.limit.duration > 0


struct HitLimit {
  mut hits: Int
}

type +HitLimit = StatusEffect & { limit: HitLimit }

action onHit(effect: +HitLimit) {
  if (isActive(effect)) {
    effect.limit.hits -= 1
  }
}

function isActive(effect: +HitLimit): Boolean = effect.limit.hits > 0


/**
 * The entity is armored and has increased defense. The armor breaks after a set amount of hits.
 */
struct Armored extends StatusEffect {
  armor: Int
  limit: HitLimit
}

function createArmored(armor: Int, durability: Int): Armored = Armored(armor, HitLimit(durability))

function affectStat(effect: Armored, statLabel: #defense, value: Int): Int = value + effect.armor


/**
 * The entity is infused with Stormlight.
 */
struct Infusion extends StatusEffect {
  limit: DurationLimit
}

function createInfusion(duration: Int): Infusion = Infusion(DurationLimit(duration))

function affectStat(effect: Infusion, statLabel: #attack | #speed, value: Int): Int = floor(value * 1.5)
function affectStat(effect: Infusion, statLabel: #dodge, value: Real): Real = 1.0 // Dodge all attacks while infused.
function affectStat(effect: Infusion, statLabel: #regeneration, value: Int): Int = 5


struct StatusEffects {
  mut effects: [StatusEffect]
}

type +StatusEffects = { statusEffects: StatusEffects }

action buff(entity: +StatusEffects, effect: StatusEffect) {
  entity.statusEffects.effects = entity.statusEffects.effects :+ effect
}

/**
 * Updates status effects, removing those from the list that have expired.
 */
action updateStatusEffects(entity: +StatusEffects) {
  let effects = entity.statusEffects.effects
  foreach(effects, onUpdate)
  entity.statusEffects.effects = filter(effects, isActive)
}

action onHitStatusEffects(entity: +StatusEffects) {
  for (effect <- entity.statusEffects.effects) onHit(effect)
}
