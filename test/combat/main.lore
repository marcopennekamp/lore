module combat

use lore.option.[Some, get!]
use lore.test._
use lore.tuple.[first, second]

use combat.combatants.Combatant
use combat.Scenario
use combat.Simulation
use combat.Simulation.Result

func simulate_scenario(scenario: (Combatant, Combatant)): Simulation.Result = do
  Simulation.simulate(first(scenario), second(scenario))
end

spec 'Kaladin wins against the Voidbringer' do
  // TODO (case): This needs pattern matching so that we can write (with the syntax not being final):
  //    result should_match do
  //      Victory(winner) => winner.name should_eq 'Kaladin'
  //    end
  let scenario = Scenario.kaladin_vs_voidbringer()
  let kaladin = first(scenario)
  let result = simulate_scenario(scenario)
  let winner = Result.winner(result)

  winner should be_some
  Combatant.name(get!(winner)) should_eq 'Kaladin' // Should be equivalent to `winner.get!.name`...
end

spec 'Sadeas and Dalinar have a stalemate' do
  // TODO (case): Also needs pattern matching, as the function `stalemate?` is superfluous. See above.
  let result = simulate_scenario(Scenario.sadeas_vs_dalinar())

  Result.stalemate?(result) should be_true // Should be equivalent to `result.stalemate?`...
end
