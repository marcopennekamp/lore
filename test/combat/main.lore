module combat

use lore.option.[Some, get!]
use lore.test._
use lore.tuple.[first, second]

use combat.combatants.[Combatant, name]
use combat.Scenario
use combat.simulation._

func simulate_scenario(scenario: (Combatant, Combatant)): Result = do
  Simulation.simulate(scenario.first, scenario.second)
end

act log(message: String) do
  //println(message)
end

spec 'Kaladin wins against the Voidbringer' do
  // TODO (case): This needs pattern matching so that we can write (with the syntax not being final):
  //    result should_match do
  //      Victory(winner) => winner.name should_eq 'Kaladin'
  //    end
  let scenario = Scenario.kaladin_vs_voidbringer()
  let kaladin = scenario.first
  let result = simulate_scenario(scenario)

  result.winner should be_some
  result.winner.get!.name should_eq 'Kaladin'
end

spec 'Sadeas and Dalinar have a stalemate' do
  // TODO (case): Also needs pattern matching, as the function `stalemate?` is superfluous. See above.
  let result = simulate_scenario(Scenario.sadeas_vs_dalinar())

  result.stalemate? should be_true
end
