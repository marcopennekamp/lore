-- Objective: Calculate the lower and upper resistance range (in ohm) of a resistor according to the color codes
--            described here: https://en.wikipedia.org/wiki/Electronic_color_code#Resistors.
module lessons.resistor

use lore.list.[flat_map, map, present?]
use lore.number.[to_real, pow]
use lore.option.[Option, Some, None, get!, get_or_else, present?, map]

use Color._

trait Color
trait Figure extends Color
trait Multiplier extends Color
trait Tolerance extends Color

module Color
  object Pink extends Multiplier
  object Silver extends Multiplier, Tolerance
  object Gold extends Multiplier, Tolerance
  object Black extends Figure, Multiplier
  object Brown extends Figure, Multiplier, Tolerance
  object Red extends Figure, Multiplier, Tolerance
  object Orange extends Figure, Multiplier, Tolerance
  object Yellow extends Figure, Multiplier, Tolerance
  object Green extends Figure, Multiplier, Tolerance
  object Blue extends Figure, Multiplier, Tolerance
  object Violet extends Figure, Multiplier, Tolerance
  object Grey extends Figure, Multiplier, Tolerance
  object White extends Figure, Multiplier

type Resistance = Real

module Figure
  func of(Figure): Int
  func of(Black): Int = 0
  func of(Brown): Int = 1
  func of(Red): Int = 2
  func of(Orange): Int = 3
  func of(Yellow): Int = 4
  func of(Green): Int = 5
  func of(Blue): Int = 6
  func of(Violet): Int = 7
  func of(Grey): Int = 8
  func of(White): Int = 9

module Multiplier
  func of(Multiplier): Real
  func of(Pink): Real = 0.001
  func of(Silver): Real = 0.01
  func of(Gold): Real = 0.1

  -- The multiplier of a figure X is 10^X, so we can calculate the multiplier here. The `Multiplier &` intersection is
  -- necessary because `Figure` is not a subtype of `Multiplier`. If `figure` was just typed as `Figure`, the
  -- multi-function call would be ambiguous for a type such as `Green` which extends both `Figure` and `Multiplier`.
  func of(figure: Multiplier & Figure): Real = pow(10.0, Figure.of(figure).to_real)

module Tolerance
  func of(Tolerance): Real
  func of(Silver): Real = 0.1
  func of(Gold): Real   = 0.05
  func of(Brown): Real  = 0.01
  func of(Red): Real    = 0.02
  func of(Orange): Real = 0.0005
  func of(Yellow): Real = 0.0002
  func of(Green): Real  = 0.005
  func of(Blue): Real   = 0.0025
  func of(Violet): Real = 0.001
  func of(Grey): Real   = 0.0001

-- The rating of a resistor comprises the low and high resistances, which are calculated from the resistor's base
-- resistance and the tolerance value.
struct Rating(low: Resistance, high: Resistance)

module Rating
  -- Calculates the rating given the color codes on the resistor. [figure3] is optional, as it's only used in precision
  -- resistors. The [tolerance] is also optional; `None` implies a tolerance of 20%.
  func of(
    figure1: Figure,
    figure2: Figure,
    figure3: Option[Figure],
    multiplier_code: Multiplier,
    tolerance_code: Option[Tolerance],
  ): Rating =
    -- TODO (case): This should be solved with pattern matching.
    let base =
      if figure3.present? then 100 * Figure.of(figure1) + 10 * Figure.of(figure2) + Figure.of(figure3.get!)
      else 10 * Figure.of(figure1) + Figure.of(figure2)
    let raw = base * Multiplier.of(multiplier_code)
    let tolerance = tolerance_code.map(Tolerance.of).get_or_else(0.2)
    Rating(raw * (1 - tolerance), raw * (1 + tolerance))

func main(): [Rating] = [
  Rating.of(Red,      Violet,   None,          Green,    Some(Gold)),
  Rating.of(Green,    Blue,     Some(Black),   Black,    Some(Brown)),
  Rating.of(Red,      Red,      None,          Orange,   Some(Blue)),
  Rating.of(Yellow,   Violet,   None,          Brown,    Some(Gold)),
  Rating.of(Blue,     Grey,     None,          Black,    Some(Orange)),
  Rating.of(Blue,     Blue,     Some(Blue),    Black,    None),
]
