struct Bar()

func foo(String): Int = 0
func foo(Int): Int = 1
func foo(Boolean): Int = 2

// TODO: Test this in dispatch.test.ts.

func test(): [Int] = do
  let a: String | Int = 2
  let b: Boolean | Int = 3
  let c: String | Boolean = 'Boom'
  let d: String | Bar = Bar()

  [
    // TODO: These calls should compile. The basic idea is that, yes, we have a sum value that foo doesn't directly
    //       declare as being a parameter. However, if there is a value with type `A | B` and we have both `foo(A): C`
    //       and `foo(B): D`, then we can be SURE that the function will be callable with the given value. The result
    //       of the function will be `C | D`.
    foo(a),
    foo(b),
    foo(c),
    // This one should not compile:
    foo(d),
  ]
end
