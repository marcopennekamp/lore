trait T1
trait T2
trait U
trait U1 extends U
trait U2 extends U
trait V
trait V1 extends V
trait W
trait W1 extends W

struct A extends T1, V {
  name: String
}
struct B extends T2, U1, V1, W1
struct C extends T1, T2, U2 {
  name: String
}

func f1(T1): String
func f1(A): String = 'A'
func f1(C): String = 'C'

func f2(T2): String
func f2(B): String = 'B'
func f2(C): String = 'C'

func f3(T1 & T2): String
func f3(C): String = 'C'

func f4(T2 & U): String
func f4(B): String = 'B'
func f4(C): String = 'C'

func f5(U): String
func f5(B): String = 'B'
func f5(C): String = 'C'

func f6(U & V): String
func f6(B): String = 'B'

func f7(V & %{ name: String }): String
func f7(A): String = 'A'

func f8(U & %{ name: String }): String
func f8(C): String = 'C'

// Note that `W1 & %{ name: String }` has no concrete subtypes and thus doesn't need to be implemented at all.
func f9(W1 & %{ name: String }): String


trait X
trait Y
struct X1 extends X, Y
struct X2 extends X, Y
struct X3 extends X, Y
struct X4 extends X
struct Y1 extends Y

func f10(X & Y): String
func f10(X1 | X2): String = 'X1|X2'
func f10(X3): String = 'X3'


func test(): [String] = {
  let a = A('Ada')
  let b = B()
  let c = C('Cone')

  [
    f1(a), f1(c),
    f2(b), f2(c),
    f3(c),
    f4(b), f4(c),
    f5(b), f5(c),
    f6(b),
    f7(a),
    f8(c),
    f10(X1()), f10(X2()), f10(X3())
  ]
}
