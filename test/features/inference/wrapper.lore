module features.inference.wrapper

use lore.Enum.map
use lore.List
use lore.String

struct Wrapper[-A, +B](function: A => B)

@where A, B >: A, C
func map_wrapper(list: [A], wrapper: Wrapper[B, C]): [C] = map(list, wrapper.function)

func map_numbers(): [String] = do
  let numbers = [1, 2, 3]
  map_wrapper(
    numbers,
    Wrapper(n => do
      List.repeat('Hey!', n) |> String.join(' ')
    end),
  )
end

@root
module features.inference do
  use lore.test._

  // Objective: Verify that type checking is able to infer the complex interactions between `map_wrapper`, `Wrapper`,
  // and the anonymous function. In particular, `numbers` should inform the type of the lambda parameter `n`.
  spec 'wrapper: `map_wrapper` maps a Wrapper struct wrapping an inferred anonymous function over a list of numbers to produce a sequence of repeated strings' do
    map_numbers() should_eq ['Hey!', 'Hey! Hey!', 'Hey! Hey! Hey!']
  end
end
