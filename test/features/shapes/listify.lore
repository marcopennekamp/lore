struct Position2D(x: Real, y: Real)
struct Position3D(x: Real, y: Real, z: Real)

func listify(shape: %{ }): [Real] = []
func listify(shape: %{ x: Real, y: Real }): [Real] = [shape.x, shape.y]
func listify(shape: %{ x: Real, y: Real, z: Real }): [Real] = [shape.x, shape.y, shape.z]

// We have to separate the generic functions for shapes so that we cannot trip up with run-time dispatch.
@where X, Y
func generic_listify_2D(shape: %{ x: X, y: Y }): [X | Y] = [shape.x, shape.y]

@where X, Y, Z
func generic_listify_3D(shape: %{ x: X, y: Y, z: Z }): [X | Y | Z] = [shape.x, shape.y, shape.z]


func test(): [[Real]] = do
  let pos_2D = Position2D(1.2, 5.0)
  let pos_3D = Position3D(0.0, 5.1, 4.8)
  let pos_2D_shape = %{ x: 1.2, y: 5.0 }
  let pos_3D_shape = %{ x: 0.0, y: 5.1, z: 4.8 }
  [
    listify(pos_2D),
    listify(pos_3D),
    generic_listify_2D(pos_2D),
    generic_listify_3D(pos_3D),
    listify(pos_2D_shape),
    listify(pos_3D_shape),
    generic_listify_2D(pos_2D_shape),
    generic_listify_3D(pos_3D_shape),
  ]
end
