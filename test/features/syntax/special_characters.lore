module features.syntax.special_characters

trait Foo?
struct Bar?(yes?: Boolean) extends Foo?

func truly?(foo?: Foo?): Boolean
func truly?(bar?: Bar?): Boolean = bar?.yes?

func truly?(shape: %{ no?: Boolean }): Boolean = !shape.no?

@root
module features.syntax do
  use lore.test._

  spec 'special_characters: the compiler can parse special characters in type and variable identifiers' do
    truly?(Bar?(true)) should be_true
    truly?(Bar?(false)) should be_false
    truly?(%{ no?: true }) should be_false
    truly?(%{ no?: false }) should be_true
  end
end
