module features.schemas.type_filter

use lore.Enum._

// TODO: The need for TypeFilter as a struct opens up a bigger discussion about explicit type argument passing.
//       Multiple dispatch is nice, but if we need these kinds of workarounds to implement such utility functions, and
//       with such verbosity, we might need to additionally introduce direct functions that don't have any dispatch
//       mechanics.
//
//       `filter_type` could be declared as follows: `def filter_type[A](list: [Any]): [A]`. Inference and calling would
//       work the same as with constructors and we could reuse parts of the existing code that handles constructors.
//       Single functions and multi-functions cannot have the same name, and only a single single function of the same
//       name can exist. The most contentious part of this idea is probably the keyword, because it cannot be `func` or
//       `proc`. `def` seems like a nice extension of `let`, or we just go `let abc[A](a: A)` and let the compiler
//       handle any ambiguities. The idea is that a single function is a procedural extension of a variable, hence
//       `let` being appropriate in my eyes.
//
//       An alternative could be to define `filter_type` in terms of type introspection:
//          `func filter_type(list: [Any], tpe: Type[A]): [A] where A`.
//
//       Usage: `list |> filter_type(type[Int])`
//
//       But of course, this only moves the goalpost to a function `type`, which would then need to be implemented as a
//       compiler built-in. If we had single functions with explicit type arguments, we could even implement this
//       function `type` as a single function backed by an intrinsic.

struct TypeFilter[A]()

@where A
func filter_type(list: [Any], tf: TypeFilter[A]): [A] = do
  list |> flat_map(e => filter_element_type(e, tf))
end

// TODO: Multiple dispatch is a bit overkill here, of course. We will replace `filter_element_type` with pattern matching
//       once that's actually supported.
// TODO: `filter_element_type` can also be private.

@where A
func filter_element_type(element: Any, tf: TypeFilter[A]): [A] = []

@where A
func filter_element_type(element: A, tf: TypeFilter[A]): [A] = [element]

@root
module features.schemas do
  use lore.test._

  spec 'type_filter: `filter_type` filters list elements based on their type' do
    let list = [12, 5, 'hello world', #schwifty, 37, 'cool world', false]
    filter_type(list, TypeFilter[Int]()) should_eq [12, 5, 37]
    filter_type(list, TypeFilter[String]()) should_eq ['hello world', 'cool world']
    filter_type(list, TypeFilter[#schwifty]()) should_eq [#schwifty]
  end
end
