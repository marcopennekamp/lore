// TODO: Investigate whether protocols can be represented by traits as well. Or if there is any way that "trait
//       implementation" and protocols could be subsumed under the same feature. It's not clear to me yet, both
//       logically and feeling, whether protocols and traits are distinct features that should both be allowed in Lore
//       and which both have their place, or whether there should only be either protocols or implementable traits and
//       having both is essentially "doing twice the work".
//          - One crucial difference between traits and protocols is this: Traits describe what a value IS, while a
//            protocol describes what a type or multiple types CAN DO, i.e. their capabilities. While the
//            multi-function system allows traits to also define what a type CAN DO in an abstract manner, traits
//            cannot accomplish this across multiple types, which is for example required for the `equal?`
//            multi-function. Protocols probably have a reduced run-time cost, because they ease the burden on the
//            subtyping hierarchy.
//          - In abstract terms, perhaps, a protocol is a constraint on one or multiple types. Such a constraint is
//            fundamentally different from a type, which is rather a constraint on a value.
// TODO: Protocols could also be called "capabilities", though "capability" is arguably harder to type. (Maybe being
//       hard to type is good, though.)
// TODO: Before we implement protocols, we should make sure that they have applications beyond these `lore.core`
//       capabilities. Some examples closer to "userland" would be beneficial in deciding whether protocols are a
//       feature to implement or not.
// TODO: How should the compiler treat protocol type parameters that stand in contravariant positions? For example, a
//       protocol function that returns a function type, such as `func foo(value: A): B => Int` for `Foo[A, B]`.

protocol Equality[A, B]
  func equal?(a: A, b: B): Boolean
end


struct Beer
  contents: [String]
end

// `impl` requires all the multi-functions defined by the protocol to be implemented. `impl` is entirely optional.
impl Equality[Beer, Beer]
func equal?(b1: Beer, b2: Beer): Boolean = b1.contents == b2.contents


// A protocol can't just be a compile-time construct. Consider this:
impl Equality[Fox, Fox]
func equal?(a: Fox, b: Fox): Boolean = a.name == b.name

func yes?(a: Any, b: Any): Boolean = false

@where A, B with Equality[A, B]
func yes?(a: A, b: B): Boolean = equal?(a, b)

action test() do
  let a = Fox()
  let b: Animal = Fox()
  yes?(a, b)  // This must dispatch, at run time, such that the SECOND implementation of `yes?` is chosen.

  let c = Fox()
  let d = Deer()
  yes?(c, d)  // This must dispatch, at run time, such that the FIRST implementation of `yes?` is chosen.
end

// In particular, the type `(A, B)` with protocol `Equality[A, B]` must be a subtype of `(Any, Any)`, but not vice
// versa. This complicates the type system further, though not necessarily to the detriment of performance.
// Checking at run time whether types implement a protocol is also only needed during dispatch when a protocol is
// specifically mentioned in a `@where` constraint. In all other cases, compile-time checks are sufficient for
// protocols. If the function `yes?` only defined the second implementation, the dispatch logic could feasibly be
// optimized away entirely.

// The biggest problem is probably how to represent protocols in the runtime and generated code such that it can be
// efficiently decided whether a protocol is implemented for an arbitrary list of type arguments. If `impl`
// declarations become mandatory, this would be relatively easy. Optional `impl` declarations require a lot more
// compiler work, and I'm not sure whether a protocol `P[A, B, ...]` can always be deduced from just function
// definitions, or if so whether it's computationally feasible.

// Another approach would be to move the burden to the runtime. Instead of trying to enumerate all protocol
// implementations, the runtime would keep a cache for each protocol. When dispatch has to resolve a protocol `@where`
// constraint that contains type arguments, the type arguments are substituted into the protocol. Then we simulate
// dispatch for each of the functions mentioned in the protocol with argument types equal to the substituted types
// in the protocol. For example, to check `Equality[A, B]` with `A = Fox` and `B = Deer`, we simulate the dispatch of
// `equal?(Fox, Deer)`. If the dispatch algorithm can find a call target for each protocol function, the protocol is
// implemented by the given type arguments. This additionally requires us to separate the dispatch code (input type -->
// call target) from the surrounding code that currently makes up the dispatch logic of a multi-function. And finally,
// when it has been determined whether the protocol is implemented for the given type arguments, the result is saved in
// a separate cache.
