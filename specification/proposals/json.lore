// TODO: This has to be built-in or something. :/
trait JsValue
trait JsObject extends JsValue
trait JsArray extends JsValue

func toJson(value: Any): JsValue = {
  let type = typeOf(value)
  error('Cannot convert a value of type $type to a JsValue: `toJson(Any)` is not implemented.')
}

// This function handles ALL shapes abd structs by converting them to JsValues. No macros needed!
// Usually, this will return a JsObject, but we don't want more specific functions to HAVE to adhere to that!
func toJson(shape: %{ }): JsValue = {
  let rec: Any => JsValue = toJson
  // Pass toJson to fromShape so that it can be called recursively from the runtime without the need to hardcode any
  // function name into the runtime.
  dynamic[JsObject]('Lore.json.fromShape', shape, rec)
}

// TODO: Standard functions for lists, strings, maps, etc.



// The user can then add specific functions for their custom types:

func toJson(sky: Sky): JsValue = toJson('Der Himmel ist blau!')
