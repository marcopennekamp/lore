module lore.option

use lore.option._
use lore.test._

spec '`get_or_else` returns a Some\'s value or the alternative value for None' do
  let a: Option[String] = Some('test')
  let b: Option[Int] = Some(42)
  let c: Option[String] = None

  a.get_or_else('fallback') should_eq 'test'
  b.get_or_else('fallback') should_eq 42
  c.get_or_else('fallback') should_eq 'fallback'
end

// TODO (pyramid): We should be able to test that `get!` panics when a None is encountered...
spec '`get!` returns a Some\'s value' do
  let a: Option[String] = Some('test')
  let b: Option[Int] = Some(42)

  a.get! should_eq 'test'
  b.get! should_eq 42
end

spec '`empty?` and `present?` report the absence/presence of a value' do
  let a: Option[String] = Some('test')
  let b: Option[Int] = Some(42)
  let c: Option[String] = None

  a.empty? should be_false
  b.empty? should be_false
  c.empty? should be_true

  a.present? should be_true
  b.present? should be_true
  c.present? should be_false
end
