//function append(list: [A], element: B): [A] where A, B <: A = dynamic[[A]]('Lore.values.list.append', list, element)
//function prepend(list: [A], element: B): [B] where A, B >: A = dynamic[[B]]('Lore.values.list.prependWiden', list, element)

// TODO: We'd have to somehow return a list of type LUB(A, B) and also propagate that type to the runtime function.
//       It'd probably be easier to just define a construction operator for lists, such as +:.
//function prepend(list: [A], element: B): [A | B] where A, B = dynamic[[A | B]]('Lore.values.list.prepend', list, element)

// Note that the append operator is defined by the compiler and thus doesn't need to be defined here.

// TODO: Rename to size to have a consistent approach to collection size? Map size should also be called size.
function length(list: [A]): Int where A = dynamic[Int]('Lore.lists.length', list)
function get(list: [A], index: Int): A where A = dynamic[A]('Lore.lists.get', list, index)

/**
  * Creates a slice of `list` from the start index, taking `length` elements if available.
  */
function slice(list: [A], startIndex: Int, length: Int): [A] where A = dynamic[[A]]('Lore.lists.slice', list, startIndex, length)

/**
  * Creates a slice of `list` from the start index until the end of the list.
  */
function slice(list: [A], startIndex: Int): [A] where A = slice(list, startIndex, length(list))

function isEmpty(list: [A]): Boolean where A = length(list) == 0

/**
  * Returns the first element of the list. Results in an error if the list is empty.
  *
  * TODO: The default `head` should return an option. We can add a second function `head!` that throws an error
  *       instead.
  * TODO: Alternative name: First. (second, third, same functions as for tuples)
  */
function head(list: [A]): A where A = get(list, 0)

/**
  * Returns the last element of the list. Results in an error if the list is empty.
  *
  * TODO: The default `last` should return an option. We can add a second function `last!` that throws an error
  *       instead.
  */
function last(list: [A]): A where A = get(list, length(list) - 1)

/**
  * Returns a slice of `list` that includes all elements except for the last one.
  */
function init(list: [A]): [A] where A = slice(list, 0, length(list) - 1)

/**
  * Returns a slice of `list` that includes all elements except for the first one.
  */
function tail(list: [A]): [A] where A = slice(list, 1)

function map(list: [A], f: B => C): [C] where A, B >: A, C = for (a <- list) f(a)
function flatMap(list: [A], f: B => [C]): [C] where A, B >: A, C = flatten(map(list, f))

function foreach(list: [A], f: B => Unit): Unit where A, B >: A = for (a <- list) f(a)

function filter(list: [A], predicate: B => Boolean): [A] where A, B >: A = {
  let mut result: [A] = []
  for (a <- list) {
    if (predicate(a)) {
      result = result :+ a
    }
  }
  result
}

function fold(list: [A], initial: B, f: (C, A) => C): C where A, B, C >: B = {
  let mut result: C = initial
  for (element <- list) {
    result = f(result, element)
  }
  result
}

function concat(as: [A], bs: [B]): [A | B] where A, B = {
  let mut result: [A | B] = as
  for (b <- bs) {
    result = result :+ b
  }
  result
}

function flatten(lists: [[A]]): [A] where A = {
  // TODO: Typing `initial` as `[A]` explicitly is currently required for this to compile. If we don't, the type of the
  //       third argument is narrowed down to ([Nothing], [A]) => [A] in both bounds. Type inference then tries to
  //       resolve the following judgment: `([Nothing], [A]) => [A] fits (iv15, iv16) => iv15` with
  //       `iv15([Nothing], Any)`. Obviously, this can't work, since iv15 would be typed as both [Nothing] and [A].
  //       It'd be correct to type iv15 as [A]. The core of the problem lies in how concat is defined: A and B are
  //       independent, so we cannot infer A from B and vice versa. Hence, the first argument of concat is inferred to
  //       be Nothing here.
  //       This problem might be resolvable by enabling "backwards inference" from the result type, where flatten's
  //       result type [A] is taken into account such that fold's C is immediately set (upper bounded) to [A].
  let initial: [A] = []
  fold(lists, initial, concat)
}

/**
  * Creates pairs with elements from the given list of <i>distinct</i> elements. The function assumes that pairs are
  * symmetric: if the list contains two elements A and B, only one pair (A, B) or (B, A) will be included in the
  * result.
  */
function symmetricPairs(list: [A]): [(A, A)] where A = {
  let mut result: [(A, A)] = []
  let length = length(list)
  let mut i = 0
  while (i < length) {
    let mut j = i
    while (j < length) {
      result = result :+ (get(list, i), get(list, j))
      j += 1
    }
    i += 1
  }
  result
}

// TODO: If we change lists to our own custom implementation, it would still be useful to expose some kind of
//       interface for Javascript arrays, just in case they are needed by the developer. This would be the place
//       to do so. However, we would first need some way to define a class whose implementation is deferred to
//       Javascript, much like dynamic calls do for functions.
//       Arrays could be typed #[T] with a constructor #[t1, t2, t3].


// TODO: Tuples need a more generic solution.
function first(tuple: (A, B)): A where A, B = dynamic[A]('Lore.tuples.get', tuple, 0)
function second(tuple: (A, B)): B where A, B = dynamic[B]('Lore.tuples.get', tuple, 1)

// TODO: Map function on tuples:
// function map(tuple: (A, B), f: A | B => C): (C, C) where A, B, C = (f(first(tuple)), f(second(tuple)))
// Pipes? (tuple |> first |> f, tuple |> second |> f)
