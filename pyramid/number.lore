/** `lore.number` provides common functions for integers and reals, as well as modules `Int` and `Real` for
  * constructing integers and reals from other representations.
  *
  * The intent in providing a common module for numbers is to simplify working with numbers of type `Int | Real`.
  * Almost all of the functions in `lore.number` are defined for both `Int` and `Real`.
  *
  * Also see `lore.Math` for mathematically focused functions.
  */
module lore.number

// TODO (pyramid): Implement `even?` and `odd?` with bitwise operations.

use lore.Enum.fold
use lore.Option
use lore.Option.[Some, None]

/**
  * Whether `x` is even.
  */
func even?(x: Int): Boolean = rem(x, 2) == 0

/**
  * Whether `x` is odd.
  */
func odd?(x: Int): Boolean = rem(x, 2) == 1

/**
  * Whether `x` is not a number.
  */
func nan?(x: Real): Boolean = intrinsic[Boolean]('lore.real.nan?', x)
func nan?(x: Int): Boolean = false

/**
  * Whether `x` is either positive or negative infinity.
  */
func inf?(x: Real): Boolean = x == Real.pos_inf || x == Real.neg_inf
func inf?(x: Int): Boolean = false

/**
  * Converts `value` to Real.
  */
func to_real(value: Int): Real = intrinsic[Real]('lore.int.to_real', value)
func to_real(value: Real): Real = value

/**
  * Converts `value` to an Int by truncating the fractional part.
  */
func to_int(value: Real): Int = intrinsic[Int]('lore.real.to_int', value)
func to_int(value: Int): Int = value

/**
  * Computes the integer remainder of `x` and `y`.
  */
func rem(x: Int, y: Int): Int = intrinsic[Int]('lore.int.rem', x, y)

/**
  * Increments `x` by 1.
  */
func inc(x: Int): Int = x + 1

/**
  * Decrements `x` by 1.
  */
func dec(x: Int): Int = x - 1

/**
  * Returns the minimum of `x` or `y`.
  */
func min(x: Int, y: Int): Int = if x < y then x else y
func min(x: Real, y: Real): Real = if x < y then x else y

/**
  * Returns the maximum of `x` or `y`.
  */
func max(x: Int, y: Int): Int = if x > y then x else y
func max(x: Real, y: Real): Real = if x > y then x else y

/**
  * Computes the absolute value of `x`.
  */
func abs(x: Int): Int = if x < 0 then -x else x
func abs(x: Real): Real = if x < 0 then -x else x

/**
  * Computes `base` to the power of `exponent`.
  *
  * TODO (pyramid): Implement the variant for Int.
  */
func pow(base: Real, exponent: Real): Real = intrinsic[Real]('lore.real.pow', base, exponent)

/**
  * Returns the largest integer that is less than or equal to `x`.
  */
func floor(x: Real): Int = intrinsic[Int]('lore.real.floor', x)

/**
  * Rounds `x` to the nearest integer, with half-way values rounding up.
  */
func ceil(x: Real): Int = intrinsic[Int]('lore.real.ceil', x)

/**
  * Returns the smallest integer that is greater than or equal to `x`.
  */
func round(x: Real): Int = intrinsic[Int]('lore.real.round', x)

/**
  * Computes the sum of all integers in `list`.
  */
func sum(list: [Int]): Int = list |> fold(0, (a, b) => a + b)

/**
  * Computes the sum of all reals in `list`.
  */
func sum(list: [Real]): Real = list |> fold(0.0, (a, b) => a + b)

/**
  * Computes the product of all integers in `list`.
  */
func product(list: [Int]): Int = list |> fold(1, (a, b) => a * b)

/**
  * Computes the product of all reals in `list`.
  */
func product(list: [Real]): Real = list |> fold(1.0, (a, b) => a * b)

module Int do
  // TODO (pyramid): Implement `Int.parse`.
end

module Real do
  /**
    * The IEEE floating point value of positive infinity.
    */
  let pos_inf: Real = intrinsic[Real]('lore.real.pos_inf')

  /**
    * The IEEE floating point value of negative infinity.
    */
  let neg_inf: Real = intrinsic[Real]('lore.real.neg_inf')

  /**
    * Parses `string` as a Real value. If `string` cannot be parsed as such, `None` is returned. The case-insensitive
    * constants `'nan'`, `'inf'`, and `'-inf'` are supported as well.
    */
  func parse(string: String): Option[Real] = do
    // TODO (pyramid): There should be a function `Option.from_try` for a result `A | #error`, but the problem is that
    //                 type parameters and sum/intersection types don't play nice together, yet. A middle ground would be
    //                 to use pattern matching, which is also not implemented yet. So for now we're resorting to a manual
    //                 extraction approach... Very ugly. We need pattern matching ASAP.
    let result = intrinsic[Real | #error]('lore.real.parse', string)
    result_to_option(result)
  end

  // TODO (pyramid): (1) this function would be superfluous if we had case expressions and (2) this function should be
  //                 private.
  func result_to_option(result: Real | #error): Option[Real]
  func result_to_option(result: Real): Some[Real] = Some(result)
  func result_to_option(#error): None = None
end
