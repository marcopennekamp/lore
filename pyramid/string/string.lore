module lore.String

use lore.core.to_string

/**
  * Returns the number of Unicode code units in the string.
  */
func length(string: String): Int = dynamic[Int]('Lore.strings.length', string)

/**
  * Concatenates `a` and `b` into a single string.
  */
func concat(a: String, b: String): String = '$a$b'

/**
  * Concatenates all strings in the given list.
  *
  * TODO: This could perhaps benefit from the performance of a dynamic implementation.
  */
func concat(strings: [String]): String = fold(strings, '', concat)

/**
  * Maps `f` to all elements of `list`, producing a list of strings which is then concatenated.
  */
@where A, B >: A
func concat_map(list: [A], f: B => String): String = list |> map(f) |> concat

/**
  * Joins the string representations of all elements of `list` into a string, separating them with `separator`.
  */
@where A
func join(list: [A], separator: String): String = do
  if empty?(list) then return ''
  concat(
    init(list) |> concat_map(a => '$a$separator'),
    last(list) |> to_string
  )
end

/**
  * Prefixes `string` with `prefix` and suffixes it with `suffix`.
  */
func affix(string: String, prefix: String, suffix: String): String = '$prefix$string$suffix'
