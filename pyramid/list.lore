func length(list: [A]): Int where A = dynamic[Int]('Lore.lists.length', list)
func size(list: [A]): Int where A = length(list)
func get(list: [A], index: Int): A where A = dynamic[A]('Lore.lists.get', list, index)

/**
  * Creates a slice of `list` from the start index, taking `length` elements if available.
  */
func slice(list: [A], startIndex: Int, length: Int): [A] where A = dynamic[[A]]('Lore.lists.slice', list, startIndex, length)

/**
  * Creates a slice of `list` from the start index until the end of the list.
  */
func slice(list: [A], startIndex: Int): [A] where A = slice(list, startIndex, length(list))

func empty?(list: [A]): Boolean where A = length(list) == 0

/**
  * Returns the first element of the list. Results in an error if the list is empty.
  *
  * TODO: The default `head` should return an option. We can add a second function `head!` that throws an error
  *       instead.
  * TODO: Alternative name: First. (second, third, same functions as for tuples)
  */
func head(list: [A]): A where A = get(list, 0)

/**
  * Returns the last element of the list. Results in an error if the list is empty.
  *
  * TODO: The default `last` should return an option. We can add a second function `last!` that throws an error
  *       instead.
  */
func last(list: [A]): A where A = get(list, length(list) - 1)

/**
  * Returns a slice of `list` that includes all elements except for the last one.
  */
func init(list: [A]): [A] where A = slice(list, 0, length(list) - 1)

/**
  * Returns a slice of `list` that includes all elements except for the first one.
  */
func tail(list: [A]): [A] where A = slice(list, 1)

func map(list: [A], f: B => C): [C] where A, B >: A, C = for a <- list yield f(a)
func flatMap(list: [A], f: B => [C]): [C] where A, B >: A, C = flatten(map(list, f))

func foreach(list: [A], f: B => Unit): Unit where A, B >: A = for a <- list yield f(a)

func filter(list: [A], predicate: B => Boolean): [A] where A, B >: A = do
  let mut result: [A] = []
  for a <- list
    if predicate(a)
      result = result :+ a
    end
  end
  result
end

func fold(list: [A], initial: I, f: (R, B) => R): R where A, B >: A, I, R >: I = do
  let mut result: R = initial
  for element <- list
    result = f(result, element)
  end
  result
end

func concat(as: [A], bs: [B]): [A | B] where A, B = do
  let mut result: [A | B] = as
  for b <- bs
    result = result :+ b
  end
  result
end

func flatten(lists: [[A]]): [A] where A = do
  // TODO: Typing `initial` as `[A]` explicitly is currently required for this to compile. If we don't, the type of the
  //       third argument is narrowed down to ([Nothing], [A]) => [A] in both bounds. Type inference then tries to
  //       resolve the following judgment: `([Nothing], [A]) => [A] fits (iv15, iv16) => iv15` with
  //       `iv15([Nothing], Any)`. Obviously, this can't work, since iv15 would be typed as both [Nothing] and [A].
  //       It'd be correct to type iv15 as [A]. The core of the problem lies in how concat is defined: A and B are
  //       independent, so we cannot infer A from B and vice versa. Hence, the first argument of concat is inferred to
  //       be Nothing here.
  //       This problem might be resolvable by enabling "backwards inference" from the result type, where flatten's
  //       result type [A] is taken into account such that fold's C is immediately set (upper bounded) to [A].
  let initial: [A] = []
  fold(lists, initial, concat)
end

/**
  * Creates pairs with elements from the given list of <i>distinct</i> elements. The function assumes that pairs are
  * symmetric: if the list contains two elements A and B, only one pair (A, B) or (B, A) will be included in the
  * result.
  */
func symmetricPairs(list: [A]): [(A, A)] where A = do
  let mut result: [(A, A)] = []
  let len = length(list)
  let mut i = 0
  while i < len
    let mut j = i
    while j < len
      result = result :+ (get(list, i), get(list, j))
      j += 1
    end
    i += 1
  end
  result
end

/**
 * Converts a Lore list to a string.
 */
func toString(list: [A]): String where A = do
  let strings = map(list, toString)
  let joined = stringJoin(strings, ', ')
  '[$joined]'
end

func repeat(times: Int, element: A): [A] where A = do
  let mut result: [A] = []
  let mut i = 0
  while i < times
    result = result :+ element
    i += 1
  end
  result
end
