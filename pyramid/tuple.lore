// TODO: Tuples need a more generic solution.
@where A, B
func first(tuple: (A, B)): A = dynamic[A]('Lore.tuples.get', tuple, 0)

@where A, B
func second(tuple: (A, B)): B = dynamic[B]('Lore.tuples.get', tuple, 1)

@where A, B, C
func first(tuple: (A, B, C)): A = dynamic[A]('Lore.tuples.get', tuple, 0)

@where A, B, C
func second(tuple: (A, B, C)): B = dynamic[B]('Lore.tuples.get', tuple, 1)

@where A, B, C
func third(tuple: (A, B, C)): C = dynamic[C]('Lore.tuples.get', tuple, 2)

// TODO: Map function on tuples:
// @where A, B, R
// func map(tuple: (A, B), f: A | B => R): (R, R) = (f(first(tuple)), f(second(tuple)))
// Pipes? (tuple |> first |> f, tuple |> second |> f)

func to_string(tuple: (Any, Any)): String = '(${first(tuple)}, ${second(tuple)})'
func to_string(tuple: (Any, Any, Any)): String = '(${first(tuple)}, ${second(tuple)}, ${third(tuple)})'
