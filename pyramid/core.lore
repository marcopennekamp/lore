module lore.core

// TODO (pyramid): Equality should be restricted to a trait Equality. Global equality is a bad idea, as it fails
//                 silently, because `equal?` can always fall back to the Any/Any function. The same issue applies to
//                 `less_than?`, which should be locked behind a trait Order.
//                 Of course, this and other traits defined in Core need proper support for providing "implementations"
//                 for traits, unless we want to hardcode these traits into the compiler. We will also have to provide
//                 a means with which a standard implementation can be derived for Equality, Order, and Showable.

/**
  * The default "equals" function used by the compiler for comparing complex types. This function is invoked when using
  * the `==` and `!=` operators with at least one non-primitive operand.
  *
  * The default implementation acts according to the specification (`equality-order.md`) and uses `equal?` for
  * recursive comparisons.
  */
func equal?(a: Any, b: Any): Boolean = intrinsic[Boolean]('lore.core.equal?', a, b, equal? :: (Any, Any) => Boolean)

/**
  * The default "less than" function used by the compiler for comparing complex types. This function is invoked when
  * using the `<` and `>` operators with at least one non-primitive operand.
  *
  * The default implementation acts according to the specification (`equality-order.md`) and uses `less_than?` for
  * recursive comparisons.
  */
func less_than?(a: Any, b: Any): Boolean = intrinsic[Boolean]('lore.core.less_than?', a, b, less_than? :: (Any, Any) => Boolean)

/**
  * The default "less than or equal" function used by the compiler for comparing complex types. This function is invoked
  * when using the `<=` and `>=` operators with at least one non-primitive operand.
  *
  * By default, `less_than_equal?` is defined in terms of `less_than?` and `equal?`, which preserves the expression
  * identity `(a <= b) == (a < b || a == b)`. Alternatives to this definition are considered in the specification in the
  * document `equality-order.md`.
  */
func less_than_equal?(a: Any, b: Any): Boolean = less_than?(a, b) || equal?(a, b)

// TODO (pyramid): Restrict hashes to a Hashable label type. This would provide better safety when using maps. More
//                 often than not, especially when maps are easy to create, proper hash-ability of a type gets
//                 overlooked and keys are used recklessly. It's much better to require a programmer to explicitly
//                 declare hash-ability.

/**
  * Computes a hash from any given value. This is used by Lore to implement maps. The standard implementation defers the
  * computation to the VM and works for any sort of value.
  *
  * TODO (pyramid): Consider adding a second parameter that represents partially computed hashes or hash state, a
  *                 technique which Julia and Rust seem to follow.
  */
func hash(value: Any): Int = panic('`lore.core.hash` is not supported yet.')

// TODO (pyramid): Restrict `to_string` to a Showable/ToString label type so that only types for which `to_string` is
//                 explicitly implemented can be used in string interpolation.

/**
  * Creates a string representation from the given value. `to_string` is used by string interpolation and library
  * functions such as `lore.io.println`. It can be specialized to stringify custom types.
  *
  * The default implementation uses the VM's native stringifier, which uses `to_string` recursively.
  */
func to_string(value: Any): String = intrinsic[String]('lore.core.to_string', value, to_string :: Any => String)

/**
  * A run-time Lore type. The struct type that backs this trait is defined ad-hoc in the VM. Various introspection
  * functions such as `type_of` and `subtype?` work with Types.
  */
trait Type

/**
  * Returns the run-time type of the given Lore value.
  */
func type_of(value: Any): Type = intrinsic[Type]('lore.core.type_of', value)

/**
  * Whether `t1` is a subtype of `t2`.
  */
func subtype?(t1: Type, t2: Type): Boolean = intrinsic[Boolean]('lore.core.subtype?', t1, t2)

/**
  * Terminates the Lore program with the given message.
  *
  * This is a TEMPORARY measure as long as Lore doesn't support exception handling.
  */
func panic(message: String): Nothing = intrinsic[Nothing]('lore.core.panic', message)
