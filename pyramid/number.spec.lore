// TODO (pyramid): Add tests for more number functions.
module lore.number

use lore.test._

spec '`inf?` recognizes `Real.pos_inf` and `Real.neg_inf`' do
  inf?(Real.pos_inf) should be_true
  inf?(Real.neg_inf) should be_true
  inf?(0.0) should be_false
end

spec '`approx?` calculates approximate equality of positive and negative numbers' do
  approx?(25.253084843001, 25.253084843) should be_true
  approx?(25.253084843001, 24.385738722382) should be_false
  approx?(-25.253084843001, -25.253084843) should be_true
  approx?(-25.253084843001, -24.385738722382) should be_false
  approx?(25.253084843001, -25.253084843) should be_false
  approx?(-25.253084843001, 25.253084843) should be_false
end

spec '`approx?` considers edge cases (0, epsilon, infinities)' do
  approx?(0.0, 0.0) should be_true
  approx?(Real.epsilon, Real.epsilon) should be_true

  approx?(1.0, 1.0 + 2 * Real.epsilon) should be_true
  approx?(1.0, 1.0 - 2 * Real.epsilon) should be_true
  approx?(-1.0, -1.0 + 2 * Real.epsilon) should be_true
  approx?(-1.0, -1.0 - 2 * Real.epsilon) should be_true
  approx?(1.0, -1.0 + 2 * Real.epsilon) should be_false
  approx?(-1.0, 1.0 - 2 * Real.epsilon) should be_false

  approx?(Real.pos_inf, Real.pos_inf) should be_true
  approx?(Real.neg_inf, Real.neg_inf) should be_true
  approx?(Real.pos_inf, Real.neg_inf) should be_false
  approx?(Real.neg_inf, Real.pos_inf) should be_false
end

spec '`min` and `max` return their minimum/maximum arguments' do
  min(-5, 0) should_eq -5
  max(-5, 0) should_eq 0
  min(1.8, 1.0) should_eq 1.0
  max(1.8, 1.0) should_eq 1.8
  max(min(2.0, 1.2), -1.0) should_eq 1.2
  max(min(max(0, 2), 1), min(-2, 2)) should_eq 1
end

spec '`pow` calculates the power of a base to an exponent' do
  pow(0.5, 0.0) should_eq 1.0
  pow(0.5, 1.0) should_eq 0.5
  pow(0.5, 2.0) should_eq 0.25
  pow(2.0, 4.0) should_eq 16.0
  pow(3.0, 2.0) should_eq 9.0
  pow(0.0, 5.0) should_eq 0.0
  pow(16.0, 0.5) should_eq 4.0
  pow(16.0, 0.25) should_eq 2.0
  pow(pow(2.0, 2.0), 2.0) should_eq 16.0
  pow(pow(2.0, pow(2.0, 2.0)), 2.0) should_eq 256.0
end
