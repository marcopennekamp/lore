module lore

use lore.core.to_string
use lore.List
use lore.Enum
use lore.Enum.[map, fold]

module String do
  /**
    * Returns the number of Unicode code units in the string.
    */
  func length(string: String): Int = dynamic[Int]('Lore.strings.length', string)

  /**
    * Concatenates `a` and `b` into a single string.
    */
  func concat(a: String, b: String): String = '$a$b'

  /**
    * Concatenates all strings in the given list.
    *
    * TODO: This could perhaps benefit from the performance of a dynamic implementation.
    */
  func concat(strings: [String]): String = fold(strings, '', concat)

  /**
    * Maps `f` to all elements of `list`, producing a list of strings which is then concatenated.
    */
  @where A, B >: A
  func concat_map(list: [A], f: B => String): String = list |> map(f) |> concat

  /**
    * Joins the string representations of all elements of `list` into a string, separating them with `separator`.
    */
  func join(list: [Any], separator: String): String = do
    if Enum.empty?(list) then return ''
    concat(
      List.init(list) |> concat_map(a => '$a$separator'),
      List.last(list) |> to_string
    )
  end

  /**
    * Prefixes `string` with `prefix` and suffixes it with `suffix`.
    */
  func affix(string: String, prefix: String, suffix: String): String = '$prefix$string$suffix'
end

module core do
  func to_string(value: String): String = value

  // TODO (modules): Implement other core functions.
end
