func length(string: String): Int = dynamic[Int]('Lore.strings.length', string)

func concat(a: String, b: String): String = '$a$b'

// TODO: This could perhaps benefit from the performance of a dynamic implementation.
func concat(strings: [String]): String = fold(strings, '', concat)

@where A, B >: A
func concat_map(strings: [A], f: B => String): String = strings |> map(f) |> concat

// TODO: This could lose the `string` prefix if we put this in a module `String`.
@where A
func string_join(list: [A], separator: String): String = do
  if empty?(list) then return ''
  concat(
    init(list) |> concat_map(a => '$a$separator'),
    last(list) |> to_string
  )
end

/**
  * Prefixes `string` with `prefix` and suffixes `string` with `suffix`.
  */
func affix(string: String, prefix: String, suffix: String): String = '$prefix$string$suffix'

/**
 * The string value of a string is simply its identity.
 */
func to_string(value: String): String = value
