trait A
struct B extends A
  mut name: String
end

trait Animal
struct Fox() extends Animal
struct Ox() extends Animal

// Illegal: `shape.prop` has the illegal type A. Expected: B.
func test(): Unit = do
  let shape: %{ prop: A } = %{ prop: B('') }
  let result: B = shape.prop
end

func pi(): Real = 3.14

// Illegal: `if ...` has the illegal type Fox | Ox. Expected: Fox.
act test2() do
  let animal: Fox = if 1 == 2 then Fox() else Ox()
end

// Illegal: `test()` has the illegal type Unit. Expected: Real.
func test3(): Real = do
  15 + test()
end

// Illegal: `pi()` has the illegal type Real. Expected: String.
func test4(): A = do
  let b = B('')
  b.name = pi()
  b
end

func advance(fox: Fox): Animal = fox

func test5(): %{ number: Int } = do
  let fox = Fox()
  // Illegal: `advance(fox)` has the illegal type Animal. Expected: Fox.
  let abc: %{ animal: Fox } = %{ animal: advance(fox) }
  abc
end
