trait A
struct AI extends A
trait B
struct BI extends B

/**
 * This example is meant to fail totality constraint validation. In simple terms, we want to ensure that
 * abstract functions which are specialized with one concrete type but never fully aren't magically valid.
 * This example is also mentioned in the spec.
 */
action f1(a: A, b: B)
action f1(a: AI, b: B)
action f1(a: A, b: BI)

function f2(value: A | B): String
function f2(value: AI): String = ''

function f3(value: (A, String)): String
function f3(value: (B, String)): String
