// The constants table is unique per bytecode unit and contains for each 16-bit index a pointer to an actual, typed
// value.
constants {
  $0 = 'Hello, '
  $1 = '.'
  $2 = 'Hello, anonymous #'
  $3 = '.'
  $4 = ['world', 5, 'marco', 'console', 42]
  $5 = multi_function_value('hello', (String | Int) => String)
}

use {
  &0 = 'lore.core.to_string'
  &1 = 'lore.Enum.map'
}

// TODO (vm): Do we even need to compile abstract functions?
// func hello(String | Int): String
multi hello(String | Int): String

// func hello(name: String): String = 'Hello, $name.'
@register_count 1
multi hello(%0: String): String {
  string_concat_const_rev %0 $0 %0
  string_concat_const %0 %0 $1
  return0
}

// func hello(id: Int): String = 'Hello, anonymous #$id.'
@register_count 1
multi hello(%0: Int): String {
  dispatch1 %0 &0 %0
  string_concat_const_rev %0 $2 %0
  string_concat_const %0 %0 $3
  return0
}

// func test(): [String] = ['world', 5, 'marco', 'console', 42] |> map(hello)
@register_count 0
multi test(): [String] {
  move_const %0 $4
  move_const %1 $5
  dispatch2 %0 &1 %0 %1
  return0
}
